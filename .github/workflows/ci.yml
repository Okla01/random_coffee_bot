name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*.*.*']
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Ежедневный запуск для проверки безопасности

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"
  AIOGRAM_VERSION: "3.2.0"
  TEST_COVERAGE_THRESHOLD: "80"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      smtp:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety ruff mypy pytest pytest-cov pytest-asyncio pytest-integration aiosmtplib pytest-mock locust
          pip install types-aiofiles types-PyYAML types-dateparser types-pytz types-setuptools
          
      - name: Run Ruff format check
        run: ruff format . --check
          
      - name: Run Ruff linter
        run: ruff check .
        
      - name: Run static analysis (Bandit + Safety)
        run: |
          bandit -r . \
            -x .venv,venv,env,tests,__pycache__ \
            --severity-level medium \
            --confidence-level high
          safety check || echo "Safety check failed but continuing..."
        
      - name: Run type checker (MyPy)
        run: mypy .
        
    #   - name: Run unit tests with coverage
    #     run: |
    #       pytest tests/unit --cov=app --cov-report=xml --cov-report=term-missing
    #       coverage report --fail-under=${{ env.TEST_COVERAGE_THRESHOLD }}
    #     env:
    #       PYTHONPATH: .
          
    #   - name: Run integration tests
    #     run: pytest tests/integration
    #     env:
    #       SMTP_HOST: localhost
    #       SMTP_PORT: 1025
    #       SMTP_USERNAME: test
    #       SMTP_PASSWORD: test
    #       SMTP_USE_TLS: "true"
    #       DB_PATH: ":memory:"
          
    #   - name: Run load tests
    #     run: locust --headless -f tests/load/locustfile.py --users 100 --spawn-rate 10 --run-time 1m
        
    #   - name: Upload coverage to Codecov
    #     uses: codecov/codecov-action@v3
    #     with:
    #       file: ./coverage.xml
    #       fail_ci_if_error: true
        
#   build-and-push:
#     needs: [test]
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
#     permissions:
#       contents: read
#       packages: write
    
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Login to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       - name: Extract metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=semver,pattern={{version}}
#             type=semver,pattern={{major}}.{{minor}}
      
#       - name: Build and push
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
      
#       - name: Log in to registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
          
#       - name: Build and push
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
#             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}