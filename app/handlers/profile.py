# app/handlers/profile.py
"""
–ê–Ω–∫–µ—Ç–∞: name ‚Üí photo ‚Üí bio ‚Üí age ‚Üí interests ‚Üí review ‚Üí filled.
–ì–∞—Å–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°—Ç–∞–¥–∏–∏ –∞–Ω–∫–µ—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.
"""

from __future__ import annotations

from datetime import datetime, timezone

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.event.bases import SkipHandler

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from ..config import Settings
from ..keyboards import (
    kb_profile_filled,
    kb_profile_photo,
    kb_prefilled_data,
    kb_profile_review,
)
from ..models import User
from ..utils.security import contains_banned_words, normalize_interests

router = Router()


# --------------------------- helpers ---------------------------- #


async def _user(session: AsyncSession, tg_id: int) -> User:
    res = await session.execute(select(User).where(User.telegram_id == tg_id))
    user = res.scalar_one_or_none()
    if user:
        return user
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /start)
    user = User(
        telegram_id=tg_id, username=None, status="new", stage="new", origin="self"
    )
    session.add(user)
    await session.flush()
    return user


def _photos_count(user: User) -> int:
    return len((user.photos_json or {}).get("photos", []))


def _append_photo(user: User, file_id: str) -> None:
    photos = (user.photos_json or {}).get("photos", [])
    if len(photos) >= 3:
        return
    photos.append({"file_id": file_id, "ts": datetime.now(timezone.utc).isoformat()})
    user.photos_json = {"photos": photos}


def _preview_text(user: User) -> str:
    lines = ["üìá –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã:"]
    if user.name:
        lines.append(f"‚Ä¢ –ò–º—è: {user.name}")
    if user.age:
        lines.append(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user.age}")
    if user.bio:
        lines.append(f"‚Ä¢ –û —Å–µ–±–µ: {user.bio}")
    interests = (user.interests_json or {}).get("interests", [])
    if interests:
        lines.append("‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: " + ", ".join(interests))
    if _photos_count(user):
        lines.append(f"‚Ä¢ –§–æ—Ç–æ: {_photos_count(user)} —à—Ç.")
    return "\n".join(lines)


async def _send_profile_preview_with_photos(
    bot, chat_id: int, user: User, state: FSMContext, reply_markup
) -> None:
    """Send profile preview with user photos.

    Behavior:
    - If user has photos: first send them as media_group (album), then send text preview with buttons
    - If no photos: just send text preview with buttons
    """
    preview = _preview_text(user)
    photos = (user.photos_json or {}).get("photos", [])
    file_ids = [p.get("file_id") for p in photos if p.get("file_id")]

    # no photos -> simple text message
    if not file_ids:
        sent = await bot.send_message(chat_id, preview, reply_markup=reply_markup)
        await state.update_data(last_kb_mid=sent.message_id)
        return

    # has photos -> first send them as media_group (album), then send text preview with buttons
    media = []
    for fid in file_ids[:10]:
        media.append(InputMediaPhoto(media=fid))

    try:
        # send photos as media group (album)
        await bot.send_media_group(chat_id=chat_id, media=media)
    except Exception:
        # ignore photo sending errors, still try to send preview text
        pass

    # then send preview text with buttons as a separate message
    sent = await bot.send_message(chat_id, preview, reply_markup=reply_markup)
    await state.update_data(last_kb_mid=sent.message_id)
    return


async def _clear_last_kb(state: FSMContext, chat_id: int, bot) -> None:
    data = await state.get_data()
    mid = data.get("last_kb_mid")
    if mid:
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id, message_id=mid, reply_markup=None
            )
        except Exception:
            pass
        await state.update_data(last_kb_mid=None)


# --------------------------- entry point ------------------------ #


@router.callback_query(F.data == "prof:start")
async def cb_prof_start(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    # —Å–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –Ω–∞–∂–∞—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.last_activity = datetime.now(timezone.utc)

        if user.status == "blocked":
            await session.commit()
            await cq.message.answer(
                "–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await cq.answer()
            return

        # If user is already in profile flow, resume their current stage instead of forcing name step.
        profile_steps = {
            "profile_name",
            "profile_photo",
            "profile_bio",
            "profile_age",
            "profile_interests",
            "profile_review",
            "profile_filled",
        }

        if user.stage not in profile_steps:
            # start from name for new users
            user.stage = "profile_name"

            # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ import_payload
            prefilled = None
            if user.origin == "import" and user.import_payload:
                prefilled = user.import_payload.get("profile_name")
                if prefilled and 2 <= len(prefilled) <= 100:
                    banned, _ = contains_banned_words(prefilled, settings.banned_words)
                    if not banned:
                        await session.commit()
                        sent = await cq.message.answer(
                            f"–£ –Ω–∞—Å –µ—Å—Ç—å –≤–∞—à–µ –∏–º—è –∏–∑ –∏–º–ø–æ—Ä—Ç–∞: {prefilled}\n–û—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ?",
                            reply_markup=kb_prefilled_data(),
                        )
                        await state.update_data(last_kb_mid=sent.message_id)
                        await cq.answer()
                        return

            await session.commit()
            await cq.message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–∫–Ω–µ—Ç—É! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            await state.update_data(last_kb_mid=None)
            await cq.answer()
            return

        # If we're here, user.stage is in profile_steps ‚Äî resume where they left off.
        await session.commit()

        if user.stage == "profile_name":
            await cq.message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–∫–Ω–µ—Ç—É! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            await state.update_data(last_kb_mid=None)
        elif user.stage == "profile_photo":
            sent = await cq.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:",
                reply_markup=kb_profile_photo(),
            )
            await state.update_data(last_kb_mid=sent.message_id)
        elif user.stage == "profile_bio":
            await cq.message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            await state.update_data(last_kb_mid=None)
        elif user.stage == "profile_age":
            await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (18‚Äì50):")
            await state.update_data(last_kb_mid=None)
        elif user.stage == "profile_interests":
            await cq.message.answer(
                "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, –º—É–∑—ã–∫–∞, –¥–∏–∑–∞–π–Ω)."
            )
            await state.update_data(last_kb_mid=None)
        elif user.stage == "profile_review":
            # send preview with attached photos (if any)
            await _send_profile_preview_with_photos(
                cq.message.bot, cq.message.chat.id, user, state, kb_profile_review()
            )
        elif user.stage == "profile_filled":
            sent = await cq.message.answer(
                _preview_text(user), reply_markup=kb_profile_filled()
            )
            await state.update_data(last_kb_mid=sent.message_id)

        await cq.answer()


@router.callback_query(F.data == "prof:prefilled:keep")
async def cb_prefilled_keep(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.stage = "profile_photo"
        if user.import_payload and user.import_payload.get("profile_name"):
            user.name = user.import_payload["profile_name"]
        await session.commit()
        sent = await cq.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:",
            reply_markup=kb_profile_photo(),
        )
        await state.update_data(last_kb_mid=sent.message_id)
        await cq.answer()


@router.callback_query(F.data == "prof:prefilled:new")
async def cb_prefilled_new(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.stage = "profile_name"
        await session.commit()
        await cq.message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.update_data(last_kb_mid=None)
        await cq.answer()


# --------------------------- text steps ------------------------- #


@router.message(F.text & ~F.text.startswith("/"))
async def on_profile_text(
    message: Message,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    """
    –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–¥–∏–π –∞–Ω–∫–µ—Ç—ã.
    """
    async with session_factory() as session:
        user = await _user(session, message.from_user.id)

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∞–¥–∏–∏ ‚Äî –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–∞ —Å—Ç–∞–¥–∏—è, –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if user.stage not in {
            "profile_name",
            "profile_bio",
            "profile_age",
            "profile_interests",
        }:
            await session.commit()
            raise SkipHandler()

        # –≥–∞—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        await _clear_last_kb(state, message.chat.id, message.bot)

        user.last_activity = datetime.now(timezone.utc)
        text = (message.text or "").strip()

        if user.status == "blocked":
            await session.commit()
            await message.answer(
                "–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return

        # NAME
        if user.stage == "profile_name":
            if not (2 <= len(text) <= 100):
                await message.answer(
                    "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
                await session.commit()
                return
            bad, word = contains_banned_words(text, settings.banned_words)
            if bad:
                await message.answer(
                    f"‚ö†Ô∏è –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ¬´{word}¬ª. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
                )
                await session.commit()
                return
            user.name = text
            user.stage = "profile_photo"
            await session.commit()
            sent = await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ:",
                reply_markup=kb_profile_photo(),
            )
            await state.update_data(last_kb_mid=sent.message_id)
            return

        # BIO
        if user.stage == "profile_bio":
            if len(text) > 500:
                await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
                await session.commit()
                return
            bad, word = contains_banned_words(text, settings.banned_words)
            if bad:
                await message.answer(
                    f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ¬´{word}¬ª. –ò—Å–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
                )
                await session.commit()
                return
            user.bio = text
            user.stage = "profile_age"
            await session.commit()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (18‚Äì50):")
            await state.update_data(last_kb_mid=None)
            return

        # AGE
        if user.stage == "profile_age":
            if not text.isdigit():
                await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 50.")
                await session.commit()
                return
            age = int(text)
            if not (18 <= age <= 50):
                await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 50.")
                await session.commit()
                return
            user.age = age
            user.stage = "profile_interests"
            await session.commit()
            await message.answer(
                "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, –º—É–∑—ã–∫–∞, –¥–∏–∑–∞–π–Ω)."
            )
            await state.update_data(last_kb_mid=None)
            return

        # INTERESTS
        if user.stage == "profile_interests":
            interests, err = normalize_interests(text, settings.banned_words)
            if err:
                await message.answer("‚ö†Ô∏è " + err)
                await session.commit()
                return
            user.interests_json = {"interests": interests or []}
            user.stage = "profile_review"
            await session.commit()
            # send preview with attached photos (if any)
            await _send_profile_preview_with_photos(
                message.bot, message.chat.id, user, state, kb_profile_review()
            )
            return


# --------------------------- photo ------------------------------ #


@router.callback_query(F.data == "prof:photo:from_profile")
async def cb_photo_from_profile(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.last_activity = datetime.now(timezone.utc)

        if user.stage != "profile_photo":
            await session.commit()
            await cq.answer("–ù–µ –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ.")
            return

        photos = await cq.message.bot.get_user_profile_photos(user.telegram_id, limit=3)
        count = 0
        for p in photos.photos:
            if not p:
                continue
            file_id = p[-1].file_id
            _append_photo(user, file_id)
            count += 1
            if count >= 3:
                break

        user.stage = "profile_bio"
        await session.commit()
        await cq.message.answer(
            "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await state.update_data(last_kb_mid=None)
        await cq.answer()


@router.callback_query(F.data == "prof:photo:skip")
async def cb_photo_skip(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.last_activity = datetime.now(timezone.utc)
        if user.stage != "profile_photo":
            await session.commit()
            await cq.answer()
            return
        user.stage = "profile_bio"
        await session.commit()
        await cq.message.answer(
            "–•–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await state.update_data(last_kb_mid=None)
        await cq.answer()


@router.message(F.photo)
async def on_photo(
    message: Message,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç 1‚Äì3 —Ñ–æ—Ç–æ; –º–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –∞–ª—å–±–æ–º–æ–º."""
    async with session_factory() as session:
        user = await _user(session, message.from_user.id)
        user.last_activity = datetime.now(timezone.utc)

        if user.status == "blocked":
            await session.commit()
            return
        if user.stage != "profile_photo":
            await session.commit()
            return

        # –≥–∞—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏
        await _clear_last_kb(state, message.chat.id, message.bot)

        file_id = message.photo[-1].file_id
        _append_photo(user, file_id)

        if _photos_count(user) >= 3:
            user.stage = "profile_bio"
            await session.commit()
            await message.answer(
                "–ü—Ä–∏–Ω—è–ª 3 —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            await state.update_data(last_kb_mid=None)
            return

        await session.commit()
        await message.answer(
            f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ({_photos_count(user)}/3). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ñ∂Ô∏è¬ª."
        )
        await state.update_data(last_kb_mid=None)  # –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        return


# --------------------------- review / save ---------------------- #


@router.callback_query(F.data == "prof:save")
async def cb_prof_save(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.stage = "profile_filled"
        await session.commit()
        sent = await cq.message.answer(
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéâ", reply_markup=kb_profile_filled()
        )
        await state.update_data(last_kb_mid=sent.message_id)
        await cq.answer()


@router.callback_query(F.data == "prof:edit:review")
async def cb_prof_edit_review(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.stage = "profile_review"
        await session.commit()
        # send preview with attached photos (if any)
        await _send_profile_preview_with_photos(
            cq.message.bot, cq.message.chat.id, user, state, kb_profile_review()
        )
        await cq.answer()


@router.callback_query(F.data.startswith("prof:edit:"))
async def cb_prof_edit_field(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    field = cq.data.split(":", 2)[2]
    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        if field == "name":
            user.stage = "profile_name"
            await session.commit()
            await cq.message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            await state.update_data(last_kb_mid=None)
        elif field == "photo":
            user.stage = "profile_photo"
            await session.commit()
            sent = await cq.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ:",
                reply_markup=kb_profile_photo(),
            )
            await state.update_data(last_kb_mid=sent.message_id)
        elif field == "bio":
            user.stage = "profile_bio"
            await session.commit()
            await cq.message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            await state.update_data(last_kb_mid=None)
        elif field == "age":
            user.stage = "profile_age"
            await session.commit()
            await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (18‚Äì50):")
            await state.update_data(last_kb_mid=None)
        elif field == "interests":
            user.stage = "profile_interests"
            await session.commit()
            await cq.message.answer("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            await state.update_data(last_kb_mid=None)
        await cq.answer()


@router.callback_query(F.data == "prof:join")
async def cb_prof_join(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await cq.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–¥–±–æ—Ä–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ."
    )
    await state.update_data(last_kb_mid=None)
    await cq.answer()
