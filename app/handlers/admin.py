# app/handlers/admin.py
"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –ø–æ /admin (–¢–ó 8.*), –¥–æ—Å—Ç—É–ø:
- –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–ª—å 'admin' (roles/user_roles) –ò–õ–ò id –≤ ADMIN_IDS, –∏ –ø—Ä–∏ —ç—Ç–æ–º status != blocked.
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π —Å .env.
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ admin_log.
"""

from __future__ import annotations

from datetime import datetime, timezone

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from ..config import Settings
from ..keyboards import kb_admin_decision
from ..models import User, Role, UserRole, AdminLog, AuthAttempt

router = Router()


async def _get_user(session: AsyncSession, tg_id: int) -> User | None:
    return (await session.execute(select(User).where(User.telegram_id == tg_id))).scalar_one_or_none()


async def _is_admin(session: AsyncSession, settings: Settings, tg_id: int) -> bool:
    user = await _get_user(session, tg_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–æ tg_id –≤ ADMIN_IDS ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ä–æ–ª–µ–π (–ø.8.3)
    if not user:
        if tg_id in settings.admin_ids:
            user = User(telegram_id=tg_id, username=None, status="new", stage="new")
            session.add(user)
            await session.flush()
        else:
            return False

    if tg_id in settings.admin_ids:
        # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª—å
        role = (await session.execute(select(Role).where(Role.name == "admin"))).scalar_one_or_none()
        if not role:
            role = Role(name="admin")
            session.add(role)
            await session.flush()
        link = (
            await session.execute(select(UserRole).where(UserRole.user_id == user.id, UserRole.role_id == role.id))
        ).scalar_one_or_none()
        if not link:
            session.add(UserRole(user_id=user.id, role_id=role.id))
            await session.flush()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–æ–ª—è–º
    q = select(Role).join(UserRole, UserRole.role_id == Role.id).where(UserRole.user_id == user.id, Role.name == "admin")
    return (await session.execute(q)).scalar_one_or_none() is not None


@router.message(Command("admin"))
async def cmd_admin(
    message: Message,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    async with session_factory() as session:
        user = await _get_user(session, message.from_user.id)
        if not user:
            # —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ tg_id ‚àà ADMIN_IDS (–¢–ó 8.3)
            if message.from_user.id in settings.admin_ids:
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    status="new",
                    stage="new",
                )
                session.add(user)
                await session.flush()
            else:
                await message.answer("‚õîÔ∏è –ù–µ—Ç –ø—Ä–∞–≤.")
                return

        if user.status == "blocked":
            await message.answer("‚õîÔ∏è –ù–µ—Ç –ø—Ä–∞–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")
            return

        if not await _is_admin(session, settings, message.from_user.id):
            await message.answer("‚õîÔ∏è –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        user.last_activity = datetime.now(timezone.utc)
        session.add(
            AdminLog(
                admin_telegram_id=message.from_user.id,
                action="open_admin",
                payload={"user_id": user.id},
            )
        )
        await session.commit()

        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞.\n–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö.")


@router.callback_query()
async def admin_callbacks(
    cq: CallbackQuery,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    data = cq.data or ""
    if not (data.startswith("admin:block:") or data.startswith("admin:unblock:")):
        return

    async with session_factory() as session:
        if not await _is_admin(session, settings, cq.from_user.id):
            await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤")
            return

        _, action, user_id_str = data.split(":")
        target_id = int(user_id_str)
        user = (await session.execute(select(User).where(User.id == target_id))).scalar_one_or_none()
        if not user:
            await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        reviewed_by = cq.from_user.username or str(cq.from_user.id)
        if action == "block":
            user.status = "blocked"
            session.add(AdminLog(admin_telegram_id=cq.from_user.id, action="block", payload={"user_id": user.id}))
            await session.commit()
            # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: –æ—Ç–º–µ—Ç–∏–º —Ä–µ—à–µ–Ω–∏–µ –∏ —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏
            try:
                await cq.message.edit_text(cq.message.text + f"\n\n–†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\nüë®‚Äçüíª–†–∞—Å—Å–º–æ—Ç—Ä–µ–ª: {'@' + reviewed_by}")
            except Exception:
                pass
            # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.telegram_id:
                try:
                    await cq.message.bot.send_message(user.telegram_id, "–†–µ—à–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: –í–∞–º –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø. –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                except Exception:
                    pass
        else:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: status=new, stage=verifying_email, counters reset
            user.status = "new"
            user.stage = "verifying_email"
            user.email_attempts = 0
            user.otp_attempts = 0
            session.add(AdminLog(admin_telegram_id=cq.from_user.id, action="unblock", payload={"user_id": user.id}))
            await session.commit()
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            try:
                await cq.message.edit_text(cq.message.text + f"\n\n–†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∫ –≤–≤–æ–¥—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ e‚Äëmail.\nüë®‚Äçüíª–†–∞—Å—Å–º–æ—Ç—Ä–µ–ª: {'@' + reviewed_by}")
            except Exception:
                pass
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.telegram_id:
                try:
                    await cq.message.bot.send_message(user.telegram_id, "–†–µ—à–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π e‚Äëmail:")
                except Exception:
                    pass
        # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        try:
            await cq.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await cq.answer()
