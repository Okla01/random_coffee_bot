# app/handlers/registration.py
"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ e-mail –∏ OTP (–¢–ó 4‚Äì6), —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≥–∞—à–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫:
- –ø—Ä–æ–≤–µ—Ä–∫–∞ e-mail –ø–æ regex –∏ –¥–æ–º–µ–Ω–∞–º,
- —É—á—ë—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏ –∞–≤—Ç–æ–±–ª–æ–∫,
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∞ OTP c –ª–∏–º–∏—Ç–∞–º–∏ (TTL, cooldown 120—Å, ‚â§3 resend/—Å–µ—Å—Å–∏—é),
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ 'authorized',
- –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 3 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏,
- —Å–Ω—è—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–°—Ç–∞–¥–∏–∏: verifying_email / verifying_email_error / verifying_code / verifying_code_error / authorized.
"""

from __future__ import annotations

import uuid
from datetime import timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.event.bases import SkipHandler

from sqlalchemy import select, desc
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from ..config import Settings
from ..keyboards import kb_auth_code_wait, kb_start_authorized, kb_admin_decision
from ..models import User, Otp, AuthAttempt, AdminLog
from ..utils.email_sender import send_otp_email
from ..utils.security import validate_email, generate_otp
from ..utils.dt import now_utc, ensure_aware_utc

router = Router()


# --------------------------- helpers ---------------------------- #


async def _user(session: AsyncSession, tg_id: int) -> User:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ (status=new, stage=new, origin='self')."""
    res = await session.execute(select(User).where(User.telegram_id == tg_id))
    user = res.scalar_one_or_none()
    if user:
        return user
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /start)
    user = User(
        telegram_id=tg_id, username=None, status="new", stage="new", origin="self"
    )
    session.add(user)
    await session.flush()
    return user


async def _log_attempt(
    session: AsyncSession, user_id: int, typ: str, value: str
) -> None:
    # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ø—ã—Ç–∫—É –∏ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id/type
    session.add(AuthAttempt(user_id=user_id, type=typ, value=value))
    await session.flush()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏; —É–¥–∞–ª—è–µ–º –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ
    q = (
        select(AuthAttempt)
        .where(AuthAttempt.user_id == user_id, AuthAttempt.type == typ)
        .order_by(desc(AuthAttempt.ts))
    )
    rows = list((await session.execute(q)).scalars())
    if len(rows) > 3:
        for old in rows[3:]:
            session.delete(old)


async def _last_attempts(
    session: AsyncSession, user_id: int, typ: str, limit: int = 3
) -> list[AuthAttempt]:
    q = (
        select(AuthAttempt)
        .where(AuthAttempt.user_id == user_id, AuthAttempt.type == typ)
        .order_by(desc(AuthAttempt.ts))
        .limit(limit)
    )
    return list((await session.execute(q)).scalars())


async def _clear_last_kb(state: FSMContext, chat_id: int, bot) -> None:
    """–°–Ω–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""
    data = await state.get_data()
    mid = data.get("last_kb_mid")
    if mid:
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id, message_id=mid, reply_markup=None
            )
        except Exception:
            pass
        await state.update_data(last_kb_mid=None)


async def _send_or_resend_otp(
    session: AsyncSession, settings: Settings, user: User
) -> tuple[bool, str | None]:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é "—Å–µ—Å—Å–∏—é" OTP, –ª–∏–±–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:
    - –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 120 —Å–µ–∫—É–Ω–¥,
    - –Ω–µ –±–æ–ª–µ–µ 3 –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–æ–∫ –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é,
    - TTL –∫–æ–¥–∞ settings.otp_ttl_seconds.
    """
    now = now_utc()

    existing = (
        (
            await session.execute(
                select(Otp)
                .where(Otp.user_id == user.id, Otp.used_at.is_(None))
                .order_by(desc(Otp.created_at))
            )
        )
        .scalars()
        .first()
    )

    warn: str | None = None

    if existing:
        ex_expires_at = ensure_aware_utc(existing.expires_at)
        ex_last_sent_at = ensure_aware_utc(existing.last_sent_at)

        if ex_expires_at and ex_expires_at > now:
            if (
                ex_last_sent_at
                and (ex_last_sent_at + timedelta(seconds=settings.otp_cooldown_seconds))
                > now
            ):
                warn = "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 120 —Å–µ–∫—É–Ω–¥."
            else:
                if existing.resend_count >= settings.resend_max_per_session:
                    warn = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–æ–∫ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏."
                else:
                    await send_otp_email(settings, user.email, existing.code)
                    existing.resend_count += 1
                    existing.last_sent_at = now
                    warn = "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ."
            return True, warn

    code = generate_otp(6)
    session_id = uuid.uuid4().hex[:8]
    expires = now + timedelta(seconds=settings.otp_ttl_seconds)

    otp = Otp(
        user_id=user.id,
        code=code,
        session_id=session_id,
        resend_count=0,
        last_sent_at=now,
        created_at=now,
        expires_at=expires,
    )
    session.add(otp)
    await send_otp_email(settings, user.email, code)
    return True, warn


async def _notify_admin_on_block(
    session: AsyncSession,
    settings: Settings,
    user: User,
    reason: str,
    typ: str,
    bot,
    sender_name: str,
) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ admin_log –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ admin_chat (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–ª–æ–∫/—Ä–∞–∑–±–ª–æ–∫).
    """
    if not settings.admin_chat_id:
        return
    attempts = await _last_attempts(session, user.id, typ)
    payload = {
        "user_id": user.id,
        "reason": reason,
        "type": typ,
        "attempts": [a.value for a in attempts],
    }
    session.add(
        AdminLog(
            admin_telegram_id=0,
            action="auth_block_request",
            payload=payload,
        )
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î, —á—Ç–æ–±—ã –≤ admin_log –±—ã–ª–æ –≤–∏–¥–Ω–æ –∑–∞—è–≤–∫—É
    await session.commit()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    try:
        text = (
            f"‚ùóÔ∏è–ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥\n"
            f"üë§: {sender_name}\n"
            f"üîó: {'@' + user.username if user.username else '–Ω–µ—Ç username'}\n"
            f"üÜî: {user.telegram_id}\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {typ} –ø–æ–ø—ã—Ç–∫–∏: {', '.join([a.value for a in attempts]) if attempts else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )
        await bot.send_message(
            chat_id=settings.admin_chat_id,
            text=text,
            reply_markup=kb_admin_decision(user.id),
        )
    except Exception:
        # –ù–µ —Ñ–µ–π–ª–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        pass


# ------------------------- email / code ------------------------- #


@router.message(F.text & ~F.text.startswith("/"))
async def on_email_or_code(
    message: Message,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    """
    –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞ —Å—Ç–∞–¥–∏—è—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: verifying_email*, verifying_code*.
    –ù–∞ —à–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ–º ‚Äî –∏—Ö –ª–æ–≤–∏—Ç profile.py.
    """
    async with session_factory() as session:
        user = await _user(session, message.from_user.id)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∞–¥–∏–∏ ‚Äî –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–∞ —Å—Ç–∞–¥–∏—è, –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if user.stage not in {
            "new",
            "verifying_email",
            "verifying_email_error",
            "verifying_code",
            "verifying_code_error",
        }:
            await session.commit()
            raise SkipHandler()

        # –°–Ω–∏–º–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏
        await _clear_last_kb(state, message.chat.id, message.bot)

        user.last_activity = now_utc()
        text = (message.text or "").strip()

        if user.status == "blocked":
            await session.commit()
            await message.answer(
                "–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return

        # E-MAIL
        if user.stage in {"new", "verifying_email", "verifying_email_error"}:
            email = text
            await _log_attempt(session, user.id, "email", email)

            exists = (
                await session.execute(
                    select(User).where(
                        User.email == email, User.telegram_id != user.telegram_id
                    )
                )
            ).scalar_one_or_none()
            if exists:
                await session.commit()
                await message.answer(
                    "–≠—Ç–æ—Ç email —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return

            ok, err = validate_email(
                email, settings.email_regex, settings.allowed_domains
            )
            if not ok:
                user.email_attempts += 1
                user.stage = "verifying_email"
                if user.email_attempts > settings.email_max_attempts:
                    user.status = "blocked"
                    user.stage = "verifying_email_error"
                    await _notify_admin_on_block(
                        session,
                        settings,
                        user,
                        "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤",
                        "email",
                        message.bot,
                        message.from_user.full_name,
                    )
                    await session.commit()
                    await message.answer(
                        "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
                    )
                    return
                await session.commit()
                await message.answer(
                    f"‚ö†Ô∏è {err}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π e-mail).\n–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {settings.email_max_attempts - user.email_attempts + 1}"
                )
                return

            user.email = email
            user.email_attempts = 0
            user.stage = "verifying_code"
            ok, warn = await _send_or_resend_otp(session, settings, user)
            await session.commit()
            msg = (
                "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç."
            )
            if warn:
                msg += f"\n‚ö†Ô∏è {warn}"
            sent = await message.answer(msg, reply_markup=kb_auth_code_wait())
            await state.update_data(last_kb_mid=sent.message_id)
            return

        # OTP
        if user.stage in {"verifying_code", "verifying_code_error"}:
            if not text.isdigit() or not (4 <= len(text) <= 8):
                await message.answer("–û–∂–∏–¥–∞—é –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ (4‚Äì8 —Ü–∏—Ñ—Ä).")
                await session.commit()
                return

            code = text
            await _log_attempt(session, user.id, "otp", code)

            now = now_utc()
            otp_row = (
                (
                    await session.execute(
                        select(Otp)
                        .where(Otp.user_id == user.id)
                        .order_by(desc(Otp.created_at))
                    )
                )
                .scalars()
                .first()
            )

            if not otp_row:
                await session.commit()
                sent = await message.answer(
                    f"–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ {user.email}?",
                    reply_markup=kb_auth_code_wait(),
                )
                await state.update_data(last_kb_mid=sent.message_id)
                return

            exp = ensure_aware_utc(otp_row.expires_at)
            used_at = ensure_aware_utc(otp_row.used_at)

            if not exp or exp <= now:
                await session.commit()
                sent = await message.answer(
                    f"–ö–æ–¥ –∏—Å—Ç—ë–∫. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ {user.email}?",
                    reply_markup=kb_auth_code_wait(),
                )
                await state.update_data(last_kb_mid=sent.message_id)
                return

            if used_at:
                await session.commit()
                sent = await message.answer(
                    "–ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.",
                    reply_markup=kb_auth_code_wait(),
                )
                await state.update_data(last_kb_mid=sent.message_id)
                return

            if code != otp_row.code:
                user.otp_attempts += 1
                user.stage = "verifying_code"
                if user.otp_attempts > settings.otp_max_attempts:
                    user.status = "blocked"
                    user.stage = "verifying_code_error"
                    await _notify_admin_on_block(
                        session,
                        settings,
                        user,
                        "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö OTP-–∫–æ–¥–æ–≤",
                        "otp",
                        message.bot,
                        message.from_user.full_name,
                    )
                    await session.commit()
                    await message.answer(
                        "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
                    )
                    return
                await session.commit()
                sent = await message.answer(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.\n–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {settings.otp_max_attempts - user.otp_attempts + 1}",
                    reply_markup=kb_auth_code_wait(),
                )
                await state.update_data(last_kb_mid=sent.message_id)
                return

            # –£–°–ü–ï–•: –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ê–Ω–∫–µ—Ç–∞ ü™™¬ª
            otp_row.used_at = now
            user.status = "active"
            user.stage = "authorized"
            user.email_attempts = 0
            user.otp_attempts = 0
            await session.commit()
            sent = await message.answer(
                "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! ‚úÖ", reply_markup=kb_start_authorized()
            )
            await state.update_data(last_kb_mid=sent.message_id)
            return

        await session.commit()
        return


# ------------------------ callbacks: resend/change -------------- #


@router.callback_query(F.data == "otp:resend")
async def cb_otp_resend(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    # –≥–∞—Å–∏–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.last_activity = now_utc()

        if user.status == "blocked":
            await session.commit()
            await cq.message.answer(
                "–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await cq.answer()
            return

        if user.stage not in {"verifying_code", "verifying_code_error"}:
            await session.commit()
            await cq.answer("–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∞.")
            return

        ok, warn = await _send_or_resend_otp(session, settings, user)
        await session.commit()
        await cq.message.answer(
            ("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥.")
            + (f"\n‚ö†Ô∏è {warn}" if warn else "")
        )
        await state.update_data(
            last_kb_mid=None
        )  # —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–µ—Ç
        await cq.answer()


@router.callback_query(F.data == "otp:change_email")
async def cb_change_email(
    cq: CallbackQuery,
    state: FSMContext,
    session_factory: async_sessionmaker[AsyncSession],
    settings: Settings,
) -> None:
    try:
        await cq.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    async with session_factory() as session:
        user = await _user(session, cq.from_user.id)
        user.last_activity = now_utc()

        if user.status == "blocked":
            await session.commit()
            await cq.message.answer(
                "–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await cq.answer()
            return

        user.stage = "verifying_email"
        await session.commit()
        await cq.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π e-mail:")
        await state.update_data(last_kb_mid=None)
        await cq.answer()
